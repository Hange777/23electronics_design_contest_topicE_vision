# Find Rects Example
#
# This example shows off how to find rectangles in the image using the quad threshold
# detection code from our April Tags code. The quad threshold detection algorithm
# detects rectangles in an extremely robust way and is much better than Hough
# Transform based methods. For example, it can still detect rectangles even when lens
# distortion causes those rectangles to look bent. Rounded rectangles are no problem!
# (But, given this the code will also detect small radius circles too)...

import sensor, image, time,pyb
from pyb import UART
import json

#对list进行拓展，高位补0
def Expand_String(a):
    while(len(a)<3):
        a.insert(0,'0')
    return a

sensor.reset()
sensor.set_pixformat(sensor.RGB565) # grayscale is faster (160x120 max on OpenMV-M7)
sensor.set_framesize(sensor.QQVGA)
sensor.skip_frames(time = 200)
sensor.set_vflip(True)#垂直方向翻转
sensor.set_hmirror(True)#水平翻转
sensor.set_windowing(32,8,85,100)  #截取图片
clock = time.clock()

led = pyb.LED(3) # Red LED = 1, Green LED = 2, Blue LED = 3, IR LEDs = 4.
#串口初始化
uart = UART(3, 115200)
uart.init(115200, bits=8, parity=None, stop=1) # init with given parameters


while(True):
    clock.tick()
    img = sensor.snapshot()
    # `threshold` below should be set to a high enough value to filter out noise
    # rectangles detected in the image which have low edge magnitudes. Rectangles
    # have larger edge magnitudes the larger and more contrasty they are...
    if(img.find_rects(threshold = 20000)):
         for r in img.find_rects(threshold = 20000):


           #img.draw_rectangle(r.rect(), color = (255, 0, 0))

           for p in r.corners(): img.draw_circle(p[0], p[1], 1, color = (0, 255, 0))

           #print(r.corners())

           list_1=list(r.corners())    #把坐标元组转为列表
           output_str=json.dumps(r.corners())  #把四点的坐标元组进行转换为列表

           #Expand_String(output_str)
           list_2 = [int(x) for item in list_1 for x in item]   #去掉列表的小括号


           print(list_2)

           a_x=list_2[0]+3
           a_y=list_2[1]-3
           b_x=list_2[2]-2
           b_y=list_2[3]-2
           c_x=list_2[4]-2
           c_y=list_2[5]+2
           d_x=list_2[6]+2
           d_y=list_2[7]+2

          # print(a_x)
           a1_x=list(json.dumps(a_x))
           a1_y=list(json.dumps(a_y))
           a2_x=list(json.dumps(b_x))
           a2_y=list(json.dumps(b_y))
           a3_x=list(json.dumps(c_x))
           a3_y=list(json.dumps(c_y))
           a4_x=list(json.dumps(d_x))
           a4_y=list(json.dumps(d_y))

           #此时用list存放的中心坐标做0拓展
           Expand_String(a1_x)
           Expand_String(a1_y)
           Expand_String(a2_x)
           Expand_String(a2_y)
           Expand_String(a3_x)
           Expand_String(a3_y)
           Expand_String(a4_x)
           Expand_String(a4_y)


           a1_x=''.join(a1_x)
           a1_y=''.join(a1_y)
           a2_x=''.join(a2_x)
           a2_y=''.join(a2_y)
           a3_x=''.join(a3_x)
           a3_y=''.join(a3_y)
           a4_x=''.join(a4_x)
           a4_y=''.join(a4_y)


           uart.write('ff')
           uart.write(a1_x)
           uart.write(a1_y)
           uart.write(a2_x)
           uart.write(a2_y)
           uart.write(a3_x)
           uart.write(a3_y)
           uart.write(a4_x)
           uart.write(a4_y)
           uart.write('ee')


           #output_str="%d,%d,%d,%d,%d,%d,%d,%d" % (a_x,a_y,b_x,b_y,c_x,c_y,d_x,d_y)

           #print(output_str)
           #print(type(output_str))

           #uart.write('ff')
           #uart.write(output_str)
           #uart.write('ee')
    else:
           print('not')



        #x=0
        #while(x<8):
           #a=list_2[x]

           #print(c)
           #b_str=str(a)

           #uart.write('ff')

           #uart.write(b_str)
           #if(x!=7):
               #uart.write(',')
           #if(x==7):
               #uart.write('ee')
               #led.on()            #亮灯
           #x=x+1
           #print(b_str)
        #print(type(a_str))
        #b=str(a_str)


        #output=json.dumps(list_2)
        #print(" ".join(list_2))
        #print(type(list_1))
        #print(output)
        #print(output[1])
        #uart.write(a)
        #uart.write(output)
        #uart.write('0xee')
